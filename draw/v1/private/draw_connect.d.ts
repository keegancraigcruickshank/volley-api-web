// @generated by protoc-gen-connect-es v0.9.1 with parameter "target=js+dts"
// @generated from file draw/v1/private/draw.proto (package draw.v1.private, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateDrawRequest, CreateDrawResponse, DeleteDrawRequest, DeleteDrawResponse, GetDrawRequest, GetDrawResponse, GetDrawRoundRequest, GetDrawRoundResponse, UpdateDrawRequest, UpdateDrawResponse } from "./draw_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service draw.v1.private.DrawService
 */
export declare const DrawService: {
  readonly typeName: "draw.v1.private.DrawService",
  readonly methods: {
    /**
     * @generated from rpc draw.v1.private.DrawService.CreateDraw
     */
    readonly createDraw: {
      readonly name: "CreateDraw",
      readonly I: typeof CreateDrawRequest,
      readonly O: typeof CreateDrawResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc draw.v1.private.DrawService.GetDraw
     */
    readonly getDraw: {
      readonly name: "GetDraw",
      readonly I: typeof GetDrawRequest,
      readonly O: typeof GetDrawResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc draw.v1.private.DrawService.UpdateDraw
     */
    readonly updateDraw: {
      readonly name: "UpdateDraw",
      readonly I: typeof UpdateDrawRequest,
      readonly O: typeof UpdateDrawResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc draw.v1.private.DrawService.DeleteDraw
     */
    readonly deleteDraw: {
      readonly name: "DeleteDraw",
      readonly I: typeof DeleteDrawRequest,
      readonly O: typeof DeleteDrawResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc draw.v1.private.DrawService.GetDrawRound
     */
    readonly getDrawRound: {
      readonly name: "GetDrawRound",
      readonly I: typeof GetDrawRoundRequest,
      readonly O: typeof GetDrawRoundResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

