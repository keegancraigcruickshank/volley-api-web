// @generated by protoc-gen-es v0.2.0 with parameter "target=js+dts"
// @generated from file users/v1/private/users.proto (package users.v1.private, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message users.v1.private.MeRequest
 */
export declare class MeRequest extends Message<MeRequest> {
  constructor(data?: PartialMessage<MeRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "users.v1.private.MeRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeRequest;

  static equals(a: MeRequest | PlainMessage<MeRequest> | undefined, b: MeRequest | PlainMessage<MeRequest> | undefined): boolean;
}

/**
 * @generated from message users.v1.private.MeResponse
 */
export declare class MeResponse extends Message<MeResponse> {
  /**
   * @generated from field: string first_name = 1;
   */
  firstName: string;

  /**
   * @generated from field: string last_name = 2;
   */
  lastName: string;

  /**
   * @generated from field: string email = 3;
   */
  email: string;

  constructor(data?: PartialMessage<MeResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "users.v1.private.MeResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeResponse;

  static equals(a: MeResponse | PlainMessage<MeResponse> | undefined, b: MeResponse | PlainMessage<MeResponse> | undefined): boolean;
}

